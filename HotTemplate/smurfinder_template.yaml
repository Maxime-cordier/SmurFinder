heat_template_version: 2018-08-31

description: >
  Heat Template to create a server, a router, and two virtual machines

parameters:
  flavor:
    type: string
    description: Flavor for the instances
    default: m1.mini

  image:
    type: string
    description: Image to be used for the instances
    default: c19f8c61-20da-4c08-b249-2005ba0efd10

  security_group_front:
    type: string
    description: Security Group ID for virtual-machine-1
    default: 2d430dc8-3d4b-4a2c-b9d8-70d70eced6bc
    properties:
      name: "Security_Group_Front"
      description: "Security group for front side of SmurFinder app"
      rules:
        - direction: ingress
          ethertype: IPv4
          port_range_min: 22
          port_range_max: 22
          protocol: tcp
        - direction: ingress
          ethertype: IPv4
          port_range_min: 80
          port_range_max: 80
          protocol: tcp
        - direction: ingress
          ethertype: IPv4
          port_range_min: 443
          port_range_max: 443
          protocol: tcp 

  security_group_back:
    type: string
    description: Security Group ID for virtual-machine-2
    default: 9d7c3fe2-1da7-45a6-85c4-04642a849f90

  external-enssat:
    type: string
    description: External ENSSAT network
    default: b2f07d8a-5b46-4fc8-a54e-e9cf4de8bee0
  
  floating-ip:
    type: string
    description: External ENSSAT network's floating ip
    default: 148.60.225.69 

resources:
  internal_network:
      type: OS::Neutron::Net

  internal_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: internal_network }
      cidr: 192.168.1.0/24
    
  router:
    type: OS::Neutron::Router
    properties:
      name: "Router-SmurFinder"
      external_gateway_info:
        network: { get_param: external-enssat }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: internal_subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external-enssat }

  floating_ip_router_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: vm1_port }
      
# voir software-config
  vm1:
    type: OS::Nova::Server
    properties:
      name: SmurFinder-VM-Front
      flavor: { get_param: flavor }
      image: { get_param: image }
      security_groups:
        - { get_resource: security_group_front }
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config-front }
      networks:
        - port: { get_resource: vm1_port }

  cloud-init-config-front:
   type: OS::Heat::CloudConfig
   properties:
    cloud_config:
      manage_etc_hosts: true
      users:
        - name: front
          plain_text_passwd: pass
          home: /home/front
          lock_passwd: false
          shell: /bin/bash
          groups: 
            - sudo
            - docker
      runcmd:
        - 'cd /home/front'
        - 'git clone https://github.com/Maxime-cordier/SmurFinder.git'
        - 'cd SmurFinder'
        - 'docker build -t smurfinder:latest'
        - 'docker-compose -f docker-compose-front.yml up'
        - 'echo "Front system is up"'
      packages:
        - git
        - npm

  vm2:
    type: OS::Nova::Server
    properties:
      name: SmurFinder-VM-Back
      flavor: { get_param: flavor }
      image: { get_param: image }
      security_groups:
        - { get_resource: security_group_back }
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config-back }
      networks:
        - port: { get_resource: vm2_port }
      block_device_mapping_v2:
          - device_name: /data/db  # Adjust the device name as needed
            volume_id: { get_resource: volume_back }

  cloud-init-config-back:
    # cloud init resource
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        manage_etc_hosts: true
        users:
          - name: back
            plain_text_passwd: pass
            home: /home/back
            lock_passwd: false
            shell: /bin/bash
            groups: 
              - sudo
              - docker
        runcmd:
          - 'cd /home/back'
          - 'git clone https://github.com/Maxime-cordier/SmurFinder.git'
          - 'cd SmurFinder'
          - 'docker-compose -f docker-compose-back.yml up'
          - 'echo "Back system is up"'
        packages:
          - git

# spécifier adresses IP pour chaque port (back surtout peut être intéressant pour savoir sur quelle adresse requêter depuis le front)
  vm1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: internal_network }
      fixed_ips:
        - subnet_id: { get_resource: internal_subnet }

  vm2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: internal_network }
      fixed_ips: 
        - ip_address: "192.168.1.3"

  volume_back:
    type: OS::Cinder::Volume
    properties:
      size: 2

outputs:
  smurfinder_app:
    description: IP address of the front VM for SmurFinder Application
    value: { get_attr: [vm1, first_address] }
